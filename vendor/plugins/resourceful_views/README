= resourceful_views 0.1

resourceful_views extends the Rails 'resources' method to install a set of helpers, one for each CRUD action, for rendering consistently classed links and forms.

== Why?

Rails, being it's opinionated self, has strong RESTful conventions for mapping HTTP request URL/method pairs to controllers/CRUD methods. In comparison, Rails appears to have view opinions about how views should be written, let alone CSS sheets or JavaScripts. I think this is some wasted RESTful momentum worth recouping, and resourceful_views is here to recoup it.

== How?

for every resource defined in routes.rb via 'resources' or 'resource', resourceful_views defines seven helper methods (plus some extras). For each of the seven 'CRUD' actions a helper is installed that

* is named '[CRUD action name]_[resource name prefix][resource name]'. Examples: 'create_book', 'edit_book_page', 'search_books'
* renders either a link or a form, that, when clicked/submitted, will send an HTTP request that gets routed to that CRUD action on the resource's controller
* gives that link or form a set of standard class attributes containing the resource name, the CRUD action name, plus the two joined with '_' to help IE. Example: 'create book create_book'

== Basic example:

Say you have a 'book' resource. With resourceful_views installed, 'map.resources :books' will not only install the standard named route helpers, but also the following ones:

  index_books, new_book, create_book, show_book, edit_book, update_book, destroy_book


Now let's look at a vertical slice through an application, with the deletion of a 'book' resource as an example:

==== Routes

  map.resources :books

==== Controller

  class BooksController < ActiveRecord::Base
    def  destroy
      @book = Book.find(params[:book])
    end
  end
  
==== View

So far so familar. Here is where Rails drops the ball. With resourceful_views, however, you can use:

  <% destroy_book(@book) %>
  
  # will render:
  <form action="/books/1" method="post" class="destroy book destroy_book">
    <input type="hidden" name="_method" value="delete" />
    <button type="submit">Delete</button>
  </form>
  
Note the auto-generated class names, allowing you to use 'resourceful' naming conventions beyond the view, for example in CSS sheets and JavaScript scripts:
  
==== CSS

  form.destroy_book button { background-image: url(/images/buttons/remove.png) }
  
==== JavaScript
  
  # LowPro behavior:
  Event.addBehavior({
    'form.destroy': ConfirmDestroyResource()
  });


Nice and consistent, isn't it? Plus, you save a line or two of code, and I get to use form helpers I can actually remember!

  <% create_book(:title => 'My new title') %>
  
  # will render:
  <form action="/books" method="post" class="create book create_book">
    <input type="text" name="book[title]" value="My new title" />
    <button type="submit">Add</button>
  </form>
  
  <% update_book(@book) do |f| %>
    <%= f.text_field :title %>
    <%= submit_button 'Save' %>
  <% end %>
  
  # will render:
  <form action="/books/1" method="post" class="update invitation update_invitation">
    <input type="text" name="books[title]" value="My current book title" />
    <button type="submit">Save</button>
  </form>
  
These are just a few examples. For more information about the installed helpers and how to use them please run rake doc:plugins and look into the RDoc documentation for the various 'build_..._helper' methods.

== How about nested views?

Not a problem. In fact, here is where it gets interesting:

  <% edit_book_page(@book, @page) %>
  
== Common options

All helpers have a default value for button/link labels that can be overridden with the :label option:

  <%= show_book(@book, :label => 'Details') %>
  
The hope is that the auto-generated class names will provide designers and scripters with a rich 'resourceful' vocabulary that will enable them to target the majority of DOM elements, without the need to come up with custom (potentially semantically meaningless) class names. However, if you absolutely need additional class names they can be specified using the :class option:

  <%= index_books(:class => 'vintage') %>
  
  # will render:
  <a href="/books" class="index books index_books vintage vintage_books">Index</a>
  
You can set a 'title' attribut on the link for link helpers and on the submit button for (block-less) form helpers with the :title option:

  <%= delete_book(book, :title => 'Click to remove') %>
  
  #will render:
  <form action="/books/1" method="post" class="destroy book destroy_book">
    <input type="hidden" name="_method" value="delete" />
    <button type="submit" title="Click to remove">Delete</button>
  </form>
  
Any additional options will be passed on to the underlying named route helpers in link helpers:

  <%= index_books(:my_param => 'my_value') %>
  
  # will render:
  <a href="/books?my_param=my_value" class="index book index_book vintage vintage_book">Index</a>

== Tests

resourceful_views comes with en extensive rspec test suite: rake spec:plugins PLUGIN=resourceful_views

== Plans
  
resourceful_views 0.1 is an experimental release. Obviously I think this pattern has promise, but it has yet to prove it's usefulness in production. Some aspects of the helper syntax I am not yet completely satisfied with, and it might change based on user feedback (ingo at ingoweiss dot com) and experience. Here are some planned additions/changes:

* There will likely be a configurable suffix for the helper names that, when turned on, will default to '_form' for form helpers and '_link' for link helpers
* The auto-generated classnames can get quite verbose, especially in lists, so it will likely be possible to turn them on/off for individual helpers, or in lists only.
* It will likely be possible to configure defaults for things like 'title' attributes
  
== Known problems

* ActiveMerchant seems to run 'routes.rb' before resourceful_views loads, resulting in resourceful_views helpers not being defined. To fix this, make sure resourceful_views loads before active_merchant by putting this in your configuration: config.plugins = [ :resourceful_views, :all ]  

== License
Copyright (c) 2008 Ingo Weiss, released under the MIT license
